package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// HitParsingResult hit parsing result
// swagger:model HitParsingResult
type HitParsingResult struct {

	// hit
	Hit string `json:"hit,omitempty"`

	// parser message
	ParserMessage []*ParserMessage `json:"parserMessage"`

	// valid
	Valid bool `json:"valid,omitempty"`
}

// Validate validates this hit parsing result
func (m *HitParsingResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParserMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HitParsingResult) validateParserMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.ParserMessage) { // not required
		return nil
	}

	for i := 0; i < len(m.ParserMessage); i++ {

		if swag.IsZero(m.ParserMessage[i]) { // not required
			continue
		}

		if m.ParserMessage[i] != nil {

			if err := m.ParserMessage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parserMessage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HitParsingResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HitParsingResult) UnmarshalBinary(b []byte) error {
	var res HitParsingResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParserMessage parser message
// swagger:model ParserMessage
type ParserMessage struct {

	// description
	Description string `json:"description,omitempty"`

	// message type
	MessageType string `json:"messageType,omitempty"`

	// parameter
	Parameter string `json:"parameter,omitempty"`
}

// Validate validates this parser message
func (m *ParserMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ParserMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParserMessage) UnmarshalBinary(b []byte) error {
	var res ParserMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
